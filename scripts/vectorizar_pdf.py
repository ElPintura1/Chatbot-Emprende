from PyPDF2 import PdfReader
from sentence_transformers import SentenceTransformer
import numpy as np
import os

# --- CONFIGURACI√ìN ---
pdf_path = "C:/Users/Chocl/Desktop/info_11_01.pdf"  # Aseg√∫rate de que esta ruta sea correcta

# --- FUNCI√ìN PARA EXTRAER TEXTO ---
def extraer_texto(pdf_path):
    print("üîç Extrayendo texto del PDF...")
    try:
        reader = PdfReader(pdf_path)
        texto = ""
        for page in reader.pages:
            texto += page.extract_text() + "\n"
        return texto
    except Exception as e:
        print(f"‚ùå Error al leer el PDF: {e}")
        return None

# --- EJECUCI√ìN PRINCIPAL ---
if __name__ == "__main__":
    # Verificar si el PDF existe
    if not os.path.exists(pdf_path):
        print(f"‚ö†Ô∏è Archivo no encontrado: {pdf_path}")
    else:
        # 1. Extraer texto
        texto = extraer_texto(pdf_path)
        if texto:
            print(f"‚úÖ Texto extra√≠do (primeros 300 caracteres):\n{texto[:300]}...")
            
            # 2. Dividir en segmentos
            segmentos = [p.strip() for p in texto.split('\n\n') if p.strip()]
            print(f"\nüìä N√∫mero de segmentos: {len(segmentos)}")
            
            # 3. Generar embeddings
            print("\nüîÑ Generando embeddings... (esto puede tomar unos minutos)")
            modelo = SentenceTransformer('all-MiniLM-L6-v2')
            embeddings = modelo.encode(segmentos)
            
            # 4. Guardar resultados
            np.save("embeddings.npy", embeddings)
            with open("segmentos.txt", "w", encoding="utf-8") as f:
                f.write("\n\n===\n\n".join(segmentos))
            
            print("\nüéâ ¬°Proceso completado! Archivos generados:")
            print(f"- embeddings.npy (vectores num√©ricos, tama√±o: {embeddings.shape})")
            print(f"- segmentos.txt (texto procesado)")
